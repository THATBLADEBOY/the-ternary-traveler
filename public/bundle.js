(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interestList = _interopRequireDefault(require("./interestList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const nameInput = document.createElement("input");
const descriptionInput = document.createElement("input");
const costInput = document.createElement("input");
const placeSelection = document.createElement("select");
const output_art = document.querySelector(".form-output");
const formBuilder = {
  buildForm() {
    const formArticle = document.createElement("article");
    output_art.appendChild(formArticle);
    const formHeader = document.createElement("h2");
    formHeader.textContent = "Create a New Interest";
    formArticle.appendChild(formHeader);
    nameInput.placeholder = "Name";
    formArticle.appendChild(nameInput);
    descriptionInput.placeholder = "Description";
    formArticle.appendChild(descriptionInput);
    costInput.placeholder = "Cost";
    formArticle.appendChild(costInput);

    _interestCollection.default.getAllPlaces().then(place => {
      const londonOption = document.createElement("option");
      londonOption.textContent = "London";
      londonOption.setAttribute("value", `${place[0].name}`);
      const parisOption = document.createElement("option");
      parisOption.textContent = "Paris";
      parisOption.setAttribute("value", `${place[1].name}`);
      const berlinOption = document.createElement("option");
      berlinOption.textContent = "Berlin";
      berlinOption.setAttribute("value", `${place[2].name}`);
      placeSelection.appendChild(londonOption);
      placeSelection.appendChild(parisOption);
      placeSelection.appendChild(berlinOption);
      formArticle.appendChild(placeSelection);
      const addInterestButton = document.createElement("button");
      addInterestButton.textContent = "Add";
      formArticle.appendChild(addInterestButton);
      addInterestButton.addEventListener("click", this.addButtonFunction);
    });
  },

  addButtonFunction() {
    let interestObj = {
      placeId: placeSelection.value,
      name: nameInput.value,
      description: descriptionInput.value,
      cost: costInput.value,
      review: ""
    };

    _interestCollection.default.postNewInterest(interestObj).then(response => {
      _interestList.default.listInterests();
    });
  }

};
var _default = formBuilder; // // "interests": [
//     { "id": 1,
//     "placeId": 1,
//     "name": "Local Market",
//     "description": "Local market where you can try purchase local products and try the local food",
//     "cost": 0.00,
//     "review": "You can definitely get things for a lower price if you are willing to bargain!"
//     }
// ]

exports.default = _default;

},{"./interestCollection":3,"./interestList":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interestList = _interopRequireDefault(require("./interestList"));

var _interestEditForm = _interopRequireDefault(require("./interestEditForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const interest = {
  makeInterestHTML(interestObj) {
    // const outPutArticle = document.querySelector(".output");
    const interestListOutput = document.createElement("article");
    interestListOutput.setAttribute("id", `interest--${interestObj.id}`); // outPutArticle.appendChild(interestListOutput);
    // let placeName = 
    // interestCollection.getAllPlaces()
    // .then(place => console.log(place[0].name, place[1].name, place[2]))

    const placeHeader = document.createElement("h3");
    placeHeader.textContent = `${interestObj.placeId}`;
    interestListOutput.appendChild(placeHeader);
    const nameParagraph = document.createElement("p");
    nameParagraph.textContent = `${interestObj.name}`;
    interestListOutput.appendChild(nameParagraph);
    const descriptionParagraph = document.createElement("p");
    descriptionParagraph.textContent = `${interestObj.description}`;
    interestListOutput.appendChild(descriptionParagraph);
    const costParagraph = document.createElement("p");
    costParagraph.textContent = `${interestObj.cost}`;
    interestListOutput.appendChild(costParagraph);
    const reviewParagraph = document.createElement("p");
    reviewParagraph.textContent = `${interestObj.review}`;
    interestListOutput.appendChild(reviewParagraph); // EDIT PORTION UNDERWAY!!!!!!!!!!!

    const editButton = document.createElement("button");
    editButton.textContent = "Edit";
    interestListOutput.appendChild(editButton);
    editButton.setAttribute("id", `interest--${interestObj.id}`);
    editButton.addEventListener("click", () => {
      let articleId = event.target.parentNode.id;
      let interestId = event.target.id.split("--")[1];
      console.log(interestId);

      _interestCollection.default.getInterest(interestId).then(response => {
        _interestEditForm.default.createAndAppendForm(articleId, response);
      });
    });
    const deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete";
    interestListOutput.appendChild(deleteButton);
    deleteButton.setAttribute("id", `interest--${interestObj.id}`);
    deleteButton.addEventListener("click", () => {
      let interestId = event.target.id.split("--")[1];
      console.log(interestId);

      _interestCollection.default.deleteInterest(interestId).then(response => {
        _interestList.default.listInterests();
      });
    });
    return interestListOutput;
  }

}; // // "interests": [
//     { "id": 1,
//     "placeId": 1,
//     "name": "Local Market",
//     "description": "Local market where you can try purchase local products and try the local food",
//     "cost": 0.00,
//     "review": "You can definitely get things for a lower price if you are willing to bargain!"
//     }
// ]

var _default = interest;
exports.default = _default;

},{"./interestCollection":3,"./interestEditForm":4,"./interestList":5}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const interestCollection = {
  getAllInterests() {
    return fetch("http://localhost:8088/interests").then(response => response.json());
  },

  getAllPlaces() {
    return fetch("http://localhost:8088/places").then(response => response.json());
  },

  postNewInterest(newInterestToSave) {
    return fetch("http://localhost:8088/interests", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(newInterestToSave)
    });
  },

  deleteInterest(interestId) {
    return fetch(`http://localhost:8088/interests/${interestId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    });
  },

  putExistingInterest(interestId, interestToEdit) {
    return fetch(`http://localhost:8088/interests/${interestId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(interestToEdit)
    });
  },

  getInterest(interestId) {
    return fetch(`http://localhost:8088/interests/${interestId}`).then(response => response.json());
  }

};
var _default = interestCollection;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interestList = _interopRequireDefault(require("./interestList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const interestEditForm = {
  createAndAppendForm(interestId, interestObjToEdit) {
    let interestCostField = document.createElement("p");
    let costLabel = document.createElement("label");
    costLabel.textContent = "Cost";
    let costInput = document.createElement("input");
    costInput.value = interestObjToEdit.cost;
    interestCostField.appendChild(costLabel);
    interestCostField.appendChild(costInput);
    let interestReviewField = document.createElement("p");
    let reviewLabel = document.createElement("label");
    reviewLabel.textContent = "Review";
    let reviewInput = document.createElement("input");
    reviewInput.value = interestObjToEdit.review;
    interestReviewField.appendChild(reviewLabel);
    interestReviewField.appendChild(reviewInput);
    let updateButton = document.createElement("button");
    updateButton.textContent = "Update";
    updateButton.addEventListener("click", () => {
      let edittedInterest = {
        placeId: interestObjToEdit.placeId,
        name: interestObjToEdit.name,
        description: interestObjToEdit.description,
        cost: costInput.value,
        review: reviewInput.value
      };
      console.log(edittedInterest);

      _interestCollection.default.putExistingInterest(interestObjToEdit.id, edittedInterest).then(response => {
        _interestList.default.listInterests();
      });
    });
    let interestItemArticle = document.getElementById(`${interestId}`); //  THIS FUNCTION WOULD CLEAR THE DOM OF THE EXISTING INTEREST WHILE EDITTING...I THINK IT IS BETTER TO VIEW EXISTING INTEREST WHILE EDITING
    // while (interestItemArticle.firstChild) {
    //   interestItemArticle.removeChild(interestItemArticle.firstChild);
    // }

    interestItemArticle.appendChild(interestCostField);
    interestItemArticle.appendChild(interestReviewField);
    interestItemArticle.appendChild(updateButton);
  }

};
var _default = interestEditForm;
exports.default = _default;

},{"./interestCollection":3,"./interestList":5}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interest = _interopRequireDefault(require("./interest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const interestList = {
  listInterests() {
    _interestCollection.default.getAllInterests().then(allInterests => {
      const interestDocFragment = document.createElement("div");
      allInterests.forEach(interestInstance => {
        console.log(interestInstance);

        const interestHtml = _interest.default.makeInterestHTML(interestInstance);

        interestDocFragment.appendChild(interestHtml);
      });
      const outputArticle = document.querySelector(".output");

      while (outputArticle.firstChild) {
        outputArticle.removeChild(outputArticle.firstChild);
      }

      outputArticle.appendChild(interestDocFragment);
    });
  }

};
var _default = interestList;
exports.default = _default;

},{"./interest":2,"./interestCollection":3}],6:[function(require,module,exports){
"use strict";

var _formBuilder = _interopRequireDefault(require("./formBuilder"));

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interestList = _interopRequireDefault(require("./interestList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_formBuilder.default.buildForm();

_interestList.default.listInterests();

},{"./formBuilder":1,"./interestCollection":3,"./interestList":5}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi9zY3JpcHRzL2Zvcm1CdWlsZGVyLmpzIiwiLi4vc2NyaXB0cy9pbnRlcmVzdC5qcyIsIi4uL3NjcmlwdHMvaW50ZXJlc3RDb2xsZWN0aW9uLmpzIiwiLi4vc2NyaXB0cy9pbnRlcmVzdEVkaXRGb3JtLmpzIiwiLi4vc2NyaXB0cy9pbnRlcmVzdExpc3QuanMiLCIuLi9zY3JpcHRzL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FDQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixPQUF2QixDQUFsQjtBQUNBLE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBekI7QUFDQSxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixPQUF2QixDQUFsQjtBQUNBLE1BQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLFFBQXZCLENBQXZCO0FBQ0EsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBbkI7QUFFQSxNQUFNLFdBQVcsR0FBRztBQUNoQixFQUFBLFNBQVMsR0FBRztBQUVSLFVBQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLFNBQXZCLENBQXBCO0FBQ0EsSUFBQSxVQUFVLENBQUMsV0FBWCxDQUF1QixXQUF2QjtBQUNBLFVBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLElBQXZCLENBQW5CO0FBQ0EsSUFBQSxVQUFVLENBQUMsV0FBWCxHQUF5Qix1QkFBekI7QUFDQSxJQUFBLFdBQVcsQ0FBQyxXQUFaLENBQXdCLFVBQXhCO0FBRUEsSUFBQSxTQUFTLENBQUMsV0FBVixHQUF3QixNQUF4QjtBQUNBLElBQUEsV0FBVyxDQUFDLFdBQVosQ0FBd0IsU0FBeEI7QUFFQSxJQUFBLGdCQUFn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SUFBSTtBQUNyQyxRQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksZ0JBQVo7O0FBQ0EsY0FBTSxZQUFZLEdBQUcsa0JBQVMsZ0JBQVQsQ0FBMEIsZ0JBQTFCLENBQXJCOztBQUNBLFFBQUEsbUJBQW1CLENBQUMsV0FBcEIsQ0FBZ0MsWUFBaEM7QUFDSCxPQUpEO0FBTUEsWUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBdEI7O0FBRUEsYUFBTyxhQUFhLENBQUMsVUFBckIsRUFBaUM7QUFDN0IsUUFBQSxhQUFhLENBQUMsV0FBZCxDQUEwQixhQUFhLENBQUMsVUFBeEM7QUFDSDs7QUFFRCxNQUFBLGFBQWEsQ0FBQyxXQUFkLENBQTBCLG1CQUExQjtBQUNILEtBbkJEO0FBb0JIOztBQXRCZ0IsQ0FBckI7ZUEyQmUsWTs7Ozs7O0FDOUJmOztBQUNBOztBQUNBOzs7O0FBR0EscUJBQVksU0FBWjs7QUFFQSxzQkFBYSxhQUFiIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiaW1wb3J0IGludGVyZXN0Q29sbGVjdGlvbiBmcm9tIFwiLi9pbnRlcmVzdENvbGxlY3Rpb25cIlxuaW1wb3J0IGludGVyZXN0TGlzdCBmcm9tIFwiLi9pbnRlcmVzdExpc3RcIlxuXG5jb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5jb25zdCBkZXNjcmlwdGlvbklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuY29uc3QgY29zdElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuY29uc3QgcGxhY2VTZWxlY3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuY29uc3Qgb3V0cHV0X2FydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybS1vdXRwdXRcIik7XG5cbmNvbnN0IGZvcm1CdWlsZGVyID0ge1xuICAgIGJ1aWxkRm9ybSgpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZvcm1BcnRpY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFydGljbGVcIik7XG4gICAgICAgIG91dHB1dF9hcnQuYXBwZW5kQ2hpbGQoZm9ybUFydGljbGUpO1xuICAgICAgICBjb25zdCBmb3JtSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgyXCIpO1xuICAgICAgICBmb3JtSGVhZGVyLnRleHRDb250ZW50ID0gXCJDcmVhdGUgYSBOZXcgSW50ZXJlc3RcIjtcbiAgICAgICAgZm9ybUFydGljbGUuYXBwZW5kQ2hpbGQoZm9ybUhlYWRlcik7IFxuICAgICAgICBcbiAgICAgICAgbmFtZUlucHV0LnBsYWNlaG9sZGVyID0gXCJOYW1lXCI7XG4gICAgICAgIGZvcm1BcnRpY2xlLmFwcGVuZENoaWxkKG5hbWVJbnB1dCk7XG4gICAgICAgIFxuICAgICAgICBkZXNjcmlwdGlvbklucHV0LnBsYWNlaG9sZGVyID0gXCJEZXNjcmlwdGlvblwiO1xuICAgICAgICBmb3JtQXJ0aWNsZS5hcHBlbmRDaGlsZChkZXNjcmlwdGlvbklucHV0KTtcbiAgICAgICAgXG4gICAgICAgIGNvc3RJbnB1dC5wbGFjZWhvbGRlciA9IFwiQ29zdFwiO1xuICAgICAgICBmb3JtQXJ0aWNsZS5hcHBlbmRDaGlsZChjb3N0SW5wdXQpO1xuXG4gICAgICAgIGludGVyZXN0Q29sbGVjdGlvbi5nZXRBbGxQbGFjZXMoKVxuICAgICAgICAudGhlbihwbGFjZSA9PiB7XG5cblxuICAgICAgICBcbiAgICAgICAgY29uc3QgbG9uZG9uT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgbG9uZG9uT3B0aW9uLnRleHRDb250ZW50ID0gXCJMb25kb25cIjtcbiAgICAgICAgbG9uZG9uT3B0aW9uLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGAke3BsYWNlWzBdLm5hbWV9YClcbiAgICAgICAgY29uc3QgcGFyaXNPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICBwYXJpc09wdGlvbi50ZXh0Q29udGVudCA9IFwiUGFyaXNcIjtcbiAgICAgICAgcGFyaXNPcHRpb24uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgYCR7cGxhY2VbMV0ubmFtZX1gKVxuICAgICAgICBjb25zdCBiZXJsaW5PcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICBiZXJsaW5PcHRpb24udGV4dENvbnRlbnQgPSBcIkJlcmxpblwiO1xuICAgICAgICBiZXJsaW5PcHRpb24uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgYCR7cGxhY2VbMl0ubmFtZX1gKTtcblxuXG4gICAgICAgIHBsYWNlU2VsZWN0aW9uLmFwcGVuZENoaWxkKGxvbmRvbk9wdGlvbik7XG4gICAgICAgIHBsYWNlU2VsZWN0aW9uLmFwcGVuZENoaWxkKHBhcmlzT3B0aW9uKTtcbiAgICAgICAgcGxhY2VTZWxlY3Rpb24uYXBwZW5kQ2hpbGQoYmVybGluT3B0aW9uKTtcbiAgICAgICAgZm9ybUFydGljbGUuYXBwZW5kQ2hpbGQocGxhY2VTZWxlY3Rpb24pO1xuXG4gICAgICAgIFxuICAgICAgICBjb25zdCBhZGRJbnRlcmVzdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIGFkZEludGVyZXN0QnV0dG9uLnRleHRDb250ZW50ID0gXCJBZGRcIjtcbiAgICAgICAgZm9ybUFydGljbGUuYXBwZW5kQ2hpbGQoYWRkSW50ZXJlc3RCdXR0b24pO1xuXG4gICAgICAgIGFkZEludGVyZXN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmFkZEJ1dHRvbkZ1bmN0aW9uKTtcbiAgICB9KVxuICAgIH0sXG5cbiAgICBhZGRCdXR0b25GdW5jdGlvbigpIHtcbiAgICAgICAgbGV0IGludGVyZXN0T2JqID0ge1xuICAgICAgICAgICAgcGxhY2VJZDogcGxhY2VTZWxlY3Rpb24udmFsdWUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lSW5wdXQudmFsdWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb25JbnB1dC52YWx1ZSxcbiAgICAgICAgICAgIGNvc3Q6IGNvc3RJbnB1dC52YWx1ZSxcbiAgICAgICAgICAgIHJldmlldzogXCJcIlxuICAgICAgICB9XG5cbiAgICAgICAgaW50ZXJlc3RDb2xsZWN0aW9uLnBvc3ROZXdJbnRlcmVzdChpbnRlcmVzdE9iailcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaW50ZXJlc3RMaXN0Lmxpc3RJbnRlcmVzdHMoKTtcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtQnVpbGRlclxuXG4vLyAvLyBcImludGVyZXN0c1wiOiBbXG4vLyAgICAgeyBcImlkXCI6IDEsXG4vLyAgICAgXCJwbGFjZUlkXCI6IDEsXG4vLyAgICAgXCJuYW1lXCI6IFwiTG9jYWwgTWFya2V0XCIsXG4vLyAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxvY2FsIG1hcmtldCB3aGVyZSB5b3UgY2FuIHRyeSBwdXJjaGFzZSBsb2NhbCBwcm9kdWN0cyBhbmQgdHJ5IHRoZSBsb2NhbCBmb29kXCIsXG4vLyAgICAgXCJjb3N0XCI6IDAuMDAsXG4vLyAgICAgXCJyZXZpZXdcIjogXCJZb3UgY2FuIGRlZmluaXRlbHkgZ2V0IHRoaW5ncyBmb3IgYSBsb3dlciBwcmljZSBpZiB5b3UgYXJlIHdpbGxpbmcgdG8gYmFyZ2FpbiFcIlxuLy8gICAgIH1cbi8vIF0iLCJpbXBvcnQgaW50ZXJlc3RDb2xsZWN0IGZyb20gXCIuL2ludGVyZXN0Q29sbGVjdGlvblwiXG5pbXBvcnQgaW50ZXJlc3RMaXN0IGZyb20gXCIuL2ludGVyZXN0TGlzdFwiO1xuaW1wb3J0IGludGVyZXN0Q29sbGVjdGlvbiBmcm9tIFwiLi9pbnRlcmVzdENvbGxlY3Rpb25cIjtcbmltcG9ydCBpbnRlcmVzdEVkaXRGb3JtIGZyb20gXCIuL2ludGVyZXN0RWRpdEZvcm1cIjtcblxuY29uc3QgaW50ZXJlc3QgPSB7XG4gICAgbWFrZUludGVyZXN0SFRNTChpbnRlcmVzdE9iaikge1xuICAgICAgICAvLyBjb25zdCBvdXRQdXRBcnRpY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5vdXRwdXRcIik7XG4gICAgICAgIGNvbnN0IGludGVyZXN0TGlzdE91dHB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhcnRpY2xlXCIpXG4gICAgICAgIGludGVyZXN0TGlzdE91dHB1dC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBgaW50ZXJlc3QtLSR7aW50ZXJlc3RPYmouaWR9YClcbiAgICAgICAgLy8gb3V0UHV0QXJ0aWNsZS5hcHBlbmRDaGlsZChpbnRlcmVzdExpc3RPdXRwdXQpO1xuICAgICAgICAvLyBsZXQgcGxhY2VOYW1lID0gXG4gICAgICAgIC8vIGludGVyZXN0Q29sbGVjdGlvbi5nZXRBbGxQbGFjZXMoKVxuICAgICAgICAvLyAudGhlbihwbGFjZSA9PiBjb25zb2xlLmxvZyhwbGFjZVswXS5uYW1lLCBwbGFjZVsxXS5uYW1lLCBwbGFjZVsyXSkpXG5cbiAgICAgICAgY29uc3QgcGxhY2VIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgICAgIHBsYWNlSGVhZGVyLnRleHRDb250ZW50ID0gYCR7aW50ZXJlc3RPYmoucGxhY2VJZH1gO1xuICAgICAgICBpbnRlcmVzdExpc3RPdXRwdXQuYXBwZW5kQ2hpbGQocGxhY2VIZWFkZXIpO1xuICAgICAgICBjb25zdCBuYW1lUGFyYWdyYXBoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIG5hbWVQYXJhZ3JhcGgudGV4dENvbnRlbnQgPSBgJHtpbnRlcmVzdE9iai5uYW1lfWA7XG4gICAgICAgIGludGVyZXN0TGlzdE91dHB1dC5hcHBlbmRDaGlsZChuYW1lUGFyYWdyYXBoKTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25QYXJhZ3JhcGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgZGVzY3JpcHRpb25QYXJhZ3JhcGgudGV4dENvbnRlbnQgPSBgJHtpbnRlcmVzdE9iai5kZXNjcmlwdGlvbn1gO1xuICAgICAgICBpbnRlcmVzdExpc3RPdXRwdXQuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb25QYXJhZ3JhcGgpO1xuICAgICAgICBjb25zdCBjb3N0UGFyYWdyYXBoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIGNvc3RQYXJhZ3JhcGgudGV4dENvbnRlbnQgPSBgJHtpbnRlcmVzdE9iai5jb3N0fWA7XG4gICAgICAgIGludGVyZXN0TGlzdE91dHB1dC5hcHBlbmRDaGlsZChjb3N0UGFyYWdyYXBoKTtcbiAgICAgICAgY29uc3QgcmV2aWV3UGFyYWdyYXBoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIHJldmlld1BhcmFncmFwaC50ZXh0Q29udGVudCA9IGAke2ludGVyZXN0T2JqLnJldmlld31gO1xuICAgICAgICBpbnRlcmVzdExpc3RPdXRwdXQuYXBwZW5kQ2hpbGQocmV2aWV3UGFyYWdyYXBoKTtcblxuXG5cblxuLy8gRURJVCBQT1JUSU9OIFVOREVSV0FZISEhISEhISEhISFcblxuXG4gICAgICAgIGNvbnN0IGVkaXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBlZGl0QnV0dG9uLnRleHRDb250ZW50ID0gXCJFZGl0XCI7XG4gICAgICAgIGludGVyZXN0TGlzdE91dHB1dC5hcHBlbmRDaGlsZChlZGl0QnV0dG9uKTtcbiAgICAgICAgZWRpdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBgaW50ZXJlc3QtLSR7aW50ZXJlc3RPYmouaWR9YClcbiAgICAgICAgZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgYXJ0aWNsZUlkID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGUuaWRcbiAgICAgICAgbGV0IGludGVyZXN0SWQgPSBldmVudC50YXJnZXQuaWQuc3BsaXQoXCItLVwiKVsxXVxuICAgICAgICAgIGNvbnNvbGUubG9nKGludGVyZXN0SWQpXG4gICAgICAgICAgaW50ZXJlc3RDb2xsZWN0aW9uLmdldEludGVyZXN0KGludGVyZXN0SWQpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgaW50ZXJlc3RFZGl0Rm9ybS5jcmVhdGVBbmRBcHBlbmRGb3JtKGFydGljbGVJZCwgcmVzcG9uc2UpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgZGVsZXRlQnV0dG9uLnRleHRDb250ZW50ID0gXCJEZWxldGVcIjtcbiAgICAgICAgaW50ZXJlc3RMaXN0T3V0cHV0LmFwcGVuZENoaWxkKGRlbGV0ZUJ1dHRvbik7XG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBgaW50ZXJlc3QtLSR7aW50ZXJlc3RPYmouaWR9YClcbiAgICAgICAgZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGxldCBpbnRlcmVzdElkID0gZXZlbnQudGFyZ2V0LmlkLnNwbGl0KFwiLS1cIilbMV1cbiAgICAgICAgY29uc29sZS5sb2coaW50ZXJlc3RJZCk7XG4gICAgICAgIGludGVyZXN0Q29sbGVjdC5kZWxldGVJbnRlcmVzdChpbnRlcmVzdElkKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIGludGVyZXN0TGlzdC5saXN0SW50ZXJlc3RzKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG5cblxuXG4gICAgICAgIHJldHVybiBpbnRlcmVzdExpc3RPdXRwdXRcblxuICAgIH1cbn1cblxuLy8gLy8gXCJpbnRlcmVzdHNcIjogW1xuLy8gICAgIHsgXCJpZFwiOiAxLFxuLy8gICAgIFwicGxhY2VJZFwiOiAxLFxuLy8gICAgIFwibmFtZVwiOiBcIkxvY2FsIE1hcmtldFwiLFxuLy8gICAgIFwiZGVzY3JpcHRpb25cIjogXCJMb2NhbCBtYXJrZXQgd2hlcmUgeW91IGNhbiB0cnkgcHVyY2hhc2UgbG9jYWwgcHJvZHVjdHMgYW5kIHRyeSB0aGUgbG9jYWwgZm9vZFwiLFxuLy8gICAgIFwiY29zdFwiOiAwLjAwLFxuLy8gICAgIFwicmV2aWV3XCI6IFwiWW91IGNhbiBkZWZpbml0ZWx5IGdldCB0aGluZ3MgZm9yIGEgbG93ZXIgcHJpY2UgaWYgeW91IGFyZSB3aWxsaW5nIHRvIGJhcmdhaW4hXCJcbi8vICAgICB9XG4vLyBdXG5cblxuXG5leHBvcnQgZGVmYXVsdCBpbnRlcmVzdCIsImNvbnN0IGludGVyZXN0Q29sbGVjdGlvbiA9IHtcbiAgXG4gICAgZ2V0QWxsSW50ZXJlc3RzKCkge1xuICAgICAgcmV0dXJuIGZldGNoKFwiaHR0cDovL2xvY2FsaG9zdDo4MDg4L2ludGVyZXN0c1wiKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgIH0sXG5cbiAgICBnZXRBbGxQbGFjZXMoKSB7XG4gICAgICByZXR1cm4gZmV0Y2goXCJodHRwOi8vbG9jYWxob3N0OjgwODgvcGxhY2VzXCIpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgfSxcblxuICAgIHBvc3ROZXdJbnRlcmVzdChuZXdJbnRlcmVzdFRvU2F2ZSkge1xuICAgICAgcmV0dXJuIGZldGNoKFwiaHR0cDovL2xvY2FsaG9zdDo4MDg4L2ludGVyZXN0c1wiLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG5ld0ludGVyZXN0VG9TYXZlKVxuICAgICAgfSlcbiAgICB9LFxuICAgXG4gICAgZGVsZXRlSW50ZXJlc3QoaW50ZXJlc3RJZCkge1xuICAgICAgcmV0dXJuIGZldGNoKGBodHRwOi8vbG9jYWxob3N0OjgwODgvaW50ZXJlc3RzLyR7aW50ZXJlc3RJZH1gLCB7XG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIFxuICAgIHB1dEV4aXN0aW5nSW50ZXJlc3QoaW50ZXJlc3RJZCwgaW50ZXJlc3RUb0VkaXQpIHtcbiAgICAgIHJldHVybiBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo4MDg4L2ludGVyZXN0cy8ke2ludGVyZXN0SWR9YCwge1xuICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGludGVyZXN0VG9FZGl0KVxuICAgICAgfSlcbiAgICB9LFxuICAgIGdldEludGVyZXN0KGludGVyZXN0SWQpIHtcbiAgICAgIHJldHVybiBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo4MDg4L2ludGVyZXN0cy8ke2ludGVyZXN0SWR9YClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICB9LFxuICB9XG5cbiAgZXhwb3J0IGRlZmF1bHQgaW50ZXJlc3RDb2xsZWN0aW9uXG5cblxuICBcbiIsImltcG9ydCBpbnRlcmVzdENvbGxlY3Rpb24gZnJvbSBcIi4vaW50ZXJlc3RDb2xsZWN0aW9uXCI7XG5pbXBvcnQgaW50ZXJlc3RMaXN0IGZyb20gXCIuL2ludGVyZXN0TGlzdFwiO1xuXG5jb25zdCBpbnRlcmVzdEVkaXRGb3JtID0ge1xuICBjcmVhdGVBbmRBcHBlbmRGb3JtIChpbnRlcmVzdElkLCBpbnRlcmVzdE9ialRvRWRpdCkge1xuXG4gICAgXG4gICAgbGV0IGludGVyZXN0Q29zdEZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIilcblxuICAgIGxldCBjb3N0TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIilcbiAgICBjb3N0TGFiZWwudGV4dENvbnRlbnQgPSBcIkNvc3RcIlxuICAgIGxldCBjb3N0SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIilcbiAgICBjb3N0SW5wdXQudmFsdWUgPSBpbnRlcmVzdE9ialRvRWRpdC5jb3N0XG5cbiAgICBpbnRlcmVzdENvc3RGaWVsZC5hcHBlbmRDaGlsZChjb3N0TGFiZWwpO1xuICAgIGludGVyZXN0Q29zdEZpZWxkLmFwcGVuZENoaWxkKGNvc3RJbnB1dCk7XG5cbiAgICBsZXQgaW50ZXJlc3RSZXZpZXdGaWVsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpXG5cbiAgICBsZXQgcmV2aWV3TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIilcbiAgICByZXZpZXdMYWJlbC50ZXh0Q29udGVudCA9IFwiUmV2aWV3XCJcbiAgICBsZXQgcmV2aWV3SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIilcbiAgICByZXZpZXdJbnB1dC52YWx1ZSA9IGludGVyZXN0T2JqVG9FZGl0LnJldmlld1xuXG4gICAgaW50ZXJlc3RSZXZpZXdGaWVsZC5hcHBlbmRDaGlsZChyZXZpZXdMYWJlbCk7XG4gICAgaW50ZXJlc3RSZXZpZXdGaWVsZC5hcHBlbmRDaGlsZChyZXZpZXdJbnB1dCk7XG5cblxuICAgIGxldCB1cGRhdGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpXG4gICAgdXBkYXRlQnV0dG9uLnRleHRDb250ZW50ID0gXCJVcGRhdGVcIlxuICAgIHVwZGF0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgXG4gICBcblxuICAgXG4gICAgXG4gICAgbGV0IGVkaXR0ZWRJbnRlcmVzdCA9IHtcbiAgICAgICAgcGxhY2VJZDogaW50ZXJlc3RPYmpUb0VkaXQucGxhY2VJZCxcbiAgICAgICAgbmFtZTogaW50ZXJlc3RPYmpUb0VkaXQubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGludGVyZXN0T2JqVG9FZGl0LmRlc2NyaXB0aW9uLFxuICAgICAgICBjb3N0OiBjb3N0SW5wdXQudmFsdWUsXG4gICAgICAgIHJldmlldzogcmV2aWV3SW5wdXQudmFsdWVcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhlZGl0dGVkSW50ZXJlc3QpO1xuICBcblxuXG4gICAgaW50ZXJlc3RDb2xsZWN0aW9uLnB1dEV4aXN0aW5nSW50ZXJlc3QoaW50ZXJlc3RPYmpUb0VkaXQuaWQgLGVkaXR0ZWRJbnRlcmVzdClcbiAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIGludGVyZXN0TGlzdC5saXN0SW50ZXJlc3RzKCk7XG4gICAgfSlcblxuICB9KVxuICAgIFxuXG4gICAgIFxuICAgICAgXG4gICAgXG5cbiAgICBcblxuICAgIFxuICAgIGxldCBpbnRlcmVzdEl0ZW1BcnRpY2xlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7aW50ZXJlc3RJZH1gKVxuXG4gIC8vICBUSElTIEZVTkNUSU9OIFdPVUxEIENMRUFSIFRIRSBET00gT0YgVEhFIEVYSVNUSU5HIElOVEVSRVNUIFdISUxFIEVESVRUSU5HLi4uSSBUSElOSyBJVCBJUyBCRVRURVIgVE8gVklFVyBFWElTVElORyBJTlRFUkVTVCBXSElMRSBFRElUSU5HXG4gICAgLy8gd2hpbGUgKGludGVyZXN0SXRlbUFydGljbGUuZmlyc3RDaGlsZCkge1xuICAgIC8vICAgaW50ZXJlc3RJdGVtQXJ0aWNsZS5yZW1vdmVDaGlsZChpbnRlcmVzdEl0ZW1BcnRpY2xlLmZpcnN0Q2hpbGQpO1xuICAgIC8vIH1cblxuXG4gICAgaW50ZXJlc3RJdGVtQXJ0aWNsZS5hcHBlbmRDaGlsZChpbnRlcmVzdENvc3RGaWVsZClcbiAgICBpbnRlcmVzdEl0ZW1BcnRpY2xlLmFwcGVuZENoaWxkKGludGVyZXN0UmV2aWV3RmllbGQpXG4gICAgaW50ZXJlc3RJdGVtQXJ0aWNsZS5hcHBlbmRDaGlsZCh1cGRhdGVCdXR0b24pXG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGludGVyZXN0RWRpdEZvcm1cbiIsImltcG9ydCBpbnRlcmVzdENvbGxlY3Rpb24gZnJvbSBcIi4vaW50ZXJlc3RDb2xsZWN0aW9uXCJcbmltcG9ydCBpbnRlcmVzdCBmcm9tIFwiLi9pbnRlcmVzdFwiXG5cbmNvbnN0IGludGVyZXN0TGlzdCA9IHtcbiAgICBsaXN0SW50ZXJlc3RzKCkge1xuICAgICAgICBpbnRlcmVzdENvbGxlY3Rpb24uZ2V0QWxsSW50ZXJlc3RzKClcbiAgICAgICAgLnRoZW4oYWxsSW50ZXJlc3RzID0+IHtcblxuICAgICAgICAgICAgY29uc3QgaW50ZXJlc3REb2NGcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICBcbiAgICAgICAgICAgIGFsbEludGVyZXN0cy5mb3JFYWNoKGludGVyZXN0SW5zdGFuY2UgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGludGVyZXN0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVyZXN0SHRtbCA9IGludGVyZXN0Lm1ha2VJbnRlcmVzdEhUTUwoaW50ZXJlc3RJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgaW50ZXJlc3REb2NGcmFnbWVudC5hcHBlbmRDaGlsZChpbnRlcmVzdEh0bWwpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0QXJ0aWNsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIub3V0cHV0XCIpO1xuXG4gICAgICAgICAgICB3aGlsZSAob3V0cHV0QXJ0aWNsZS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0QXJ0aWNsZS5yZW1vdmVDaGlsZChvdXRwdXRBcnRpY2xlLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdXRwdXRBcnRpY2xlLmFwcGVuZENoaWxkKGludGVyZXN0RG9jRnJhZ21lbnQpO1xuICAgICAgICB9KVxuICAgIH1cbn1cblxuXG5cbmV4cG9ydCBkZWZhdWx0IGludGVyZXN0TGlzdCIsImltcG9ydCBmb3JtQnVpbGRlciBmcm9tIFwiLi9mb3JtQnVpbGRlclwiXG5pbXBvcnQgaW50ZXJlc3RDb2xsZWN0aW9uIGZyb20gXCIuL2ludGVyZXN0Q29sbGVjdGlvblwiXG5pbXBvcnQgaW50ZXJlc3RMaXN0IGZyb20gXCIuL2ludGVyZXN0TGlzdFwiXG5cblxuZm9ybUJ1aWxkZXIuYnVpbGRGb3JtKCk7XG5cbmludGVyZXN0TGlzdC5saXN0SW50ZXJlc3RzKCk7XG5cblxuXG4iXX0=
