(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interestList = _interopRequireDefault(require("./interestList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const nameInput = document.createElement("input");
const descriptionInput = document.createElement("input");
const costInput = document.createElement("input");
const placeSelection = document.createElement("select");
const output_art = document.querySelector(".form-output");
const formBuilder = {
  buildForm() {
    const formArticle = document.createElement("article");
    output_art.appendChild(formArticle);
    const formHeader = document.createElement("h2");
    formHeader.textContent = "Create a New Interest";
    formArticle.appendChild(formHeader);
    nameInput.placeholder = "Name";
    formArticle.appendChild(nameInput);
    descriptionInput.placeholder = "Description";
    formArticle.appendChild(descriptionInput);
    costInput.placeholder = "Cost";
    formArticle.appendChild(costInput);

    _interestCollection.default.getAllPlaces().then(place => {
      const londonOption = document.createElement("option");
      londonOption.textContent = "London";
      londonOption.setAttribute("value", `${place[0].name}`);
      const parisOption = document.createElement("option");
      parisOption.textContent = "Paris";
      parisOption.setAttribute("value", `${place[1].name}`);
      const berlinOption = document.createElement("option");
      berlinOption.textContent = "Berlin";
      berlinOption.setAttribute("value", `${place[2].name}`);
      placeSelection.appendChild(londonOption);
      placeSelection.appendChild(parisOption);
      placeSelection.appendChild(berlinOption);
      formArticle.appendChild(placeSelection);
    });

    const addInterestButton = document.createElement("button");
    addInterestButton.textContent = "Add";
    formArticle.appendChild(addInterestButton);
    addInterestButton.addEventListener("click", this.addButtonFunction);
  },

  addButtonFunction() {
    let interestObj = {
      place: placeSelection.value,
      name: nameInput.value,
      description: descriptionInput.value,
      cost: costInput.value,
      review: ""
    };

    _interestCollection.default.postNewInterest(interestObj).then(response => {
      _interestList.default.listInterests();
    });
  }

};
var _default = formBuilder; // // "interests": [
//     { "id": 1,
//     "placeId": 1,
//     "name": "Local Market",
//     "description": "Local market where you can try purchase local products and try the local food",
//     "cost": 0.00,
//     "review": "You can definitely get things for a lower price if you are willing to bargain!"
//     }
// ]

exports.default = _default;

},{"./interestCollection":3,"./interestList":5}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interestList = _interopRequireDefault(require("./interestList"));

var _interestEditForm = _interopRequireDefault(require("./interestEditForm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const interest = {
  makeInterestHTML(interestObj) {
    // const outPutArticle = document.querySelector(".output");
    const interestListOutput = document.createElement("article");
    interestListOutput.setAttribute("id", `interest--${interestObj.id}`); // outPutArticle.appendChild(interestListOutput);
    // let placeName = 
    // interestCollection.getAllPlaces()
    // .then(place => console.log(place[0].name, place[1].name, place[2]))

    const placeHeader = document.createElement("h3");
    placeHeader.textContent = `${interestObj.place}`;
    interestListOutput.appendChild(placeHeader);
    const nameParagraph = document.createElement("p");
    nameParagraph.textContent = `${interestObj.name}`;
    interestListOutput.appendChild(nameParagraph);
    const descriptionParagraph = document.createElement("p");
    descriptionParagraph.textContent = `${interestObj.description}`;
    interestListOutput.appendChild(descriptionParagraph);
    const costParagraph = document.createElement("p");
    costParagraph.textContent = `${interestObj.cost}`;
    interestListOutput.appendChild(costParagraph);
    const reviewParagraph = document.createElement("p");
    reviewParagraph.textContent = `${interestObj.review}`;
    interestListOutput.appendChild(reviewParagraph); // EDIT PORTION UNDERWAY!!!!!!!!!!!

    const editButton = document.createElement("button");
    editButton.textContent = "Edit";
    interestListOutput.appendChild(editButton);
    editButton.setAttribute("id", `interest--${interestObj.id}`);
    editButton.addEventListener("click", () => {
      let articleId = event.target.parentNode.id;
      let interestId = event.target.id.split("--")[1];
      console.log(interestId);

      _interestCollection.default.getInterest(interestId).then(response => {
        _interestEditForm.default.createAndAppendForm(articleId, response);
      });
    });
    const deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete";
    interestListOutput.appendChild(deleteButton);
    deleteButton.setAttribute("id", `interest--${interestObj.id}`);
    deleteButton.addEventListener("click", () => {
      let interestId = event.target.id.split("--")[1];
      console.log(interestId);

      _interestCollection.default.deleteInterest(interestId).then(response => {
        _interestList.default.listInterests();
      });
    });
    return interestListOutput;
  }

}; // // "interests": [
//     { "id": 1,
//     "placeId": 1,
//     "name": "Local Market",
//     "description": "Local market where you can try purchase local products and try the local food",
//     "cost": 0.00,
//     "review": "You can definitely get things for a lower price if you are willing to bargain!"
//     }
// ]

var _default = interest;
exports.default = _default;

},{"./interestCollection":3,"./interestEditForm":4,"./interestList":5}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const interestCollection = {
  getAllInterests() {
    return fetch("http://localhost:8088/interests").then(response => response.json());
  },

  getAllPlaces() {
    return fetch("http://localhost:8088/places").then(response => response.json());
  },

  postNewInterest(newInterestToSave) {
    return fetch("http://localhost:8088/interests", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(newInterestToSave)
    });
  },

  deleteInterest(interestId) {
    return fetch(`http://localhost:8088/interests/${interestId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      }
    });
  },

  putExistingInterest(interestId, interestToEdit) {
    return fetch(`http://localhost:8088/interests/${interestId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(interestToEdit)
    });
  },

  getInterest(interestId) {
    return fetch(`http://localhost:8088/interests/${interestId}`).then(response => response.json());
  }

};
var _default = interestCollection;
exports.default = _default;

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interestList = _interopRequireDefault(require("./interestList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const interestEditForm = {
  createAndAppendForm(interestId, interestObjToEdit) {
    let interestCostField = document.createElement("p");
    let costLabel = document.createElement("label");
    costLabel.textContent = "Cost";
    let costInput = document.createElement("input");
    costInput.value = interestObjToEdit.cost;
    interestCostField.appendChild(costLabel);
    interestCostField.appendChild(costInput);
    let interestReviewField = document.createElement("p");
    let reviewLabel = document.createElement("label");
    reviewLabel.textContent = "Review";
    let reviewInput = document.createElement("input");
    reviewInput.value = interestObjToEdit.review;
    interestReviewField.appendChild(reviewLabel);
    interestReviewField.appendChild(reviewInput);
    let updateButton = document.createElement("button");
    updateButton.textContent = "Update";
    updateButton.addEventListener("click", () => {
      let edittedInterest = {
        place: interestObjToEdit.place,
        name: interestObjToEdit.name,
        description: interestObjToEdit.description,
        cost: costInput.value,
        review: reviewInput.value
      };
      console.log(edittedInterest);

      _interestCollection.default.putExistingInterest(interestObjToEdit.id, edittedInterest).then(response => {
        _interestList.default.listInterests();
      });
    });
    let interestItemArticle = document.getElementById(`${interestId}`); //  THIS FUNCTION WOULD CLEAR THE DOM OF THE EXISTING INTEREST WHILE EDITTING...I THINK IT IS BETTER TO VIEW EXISTING INTEREST WHILE EDITING
    // while (interestItemArticle.firstChild) {
    //   interestItemArticle.removeChild(interestItemArticle.firstChild);
    // }

    interestItemArticle.appendChild(interestCostField);
    interestItemArticle.appendChild(interestReviewField);
    interestItemArticle.appendChild(updateButton);
  }

};
var _default = interestEditForm;
exports.default = _default;

},{"./interestCollection":3,"./interestList":5}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interest = _interopRequireDefault(require("./interest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const interestList = {
  listInterests() {
    _interestCollection.default.getAllInterests().then(allInterests => {
      const interestDocFragment = document.createElement("div");
      allInterests.forEach(interestInstance => {
        console.log(interestInstance);

        const interestHtml = _interest.default.makeInterestHTML(interestInstance);

        interestDocFragment.appendChild(interestHtml);
      });
      const outputArticle = document.querySelector(".output");

      while (outputArticle.firstChild) {
        outputArticle.removeChild(outputArticle.firstChild);
      }

      outputArticle.appendChild(interestDocFragment);
    });
  }

};
var _default = interestList;
exports.default = _default;

},{"./interest":2,"./interestCollection":3}],6:[function(require,module,exports){
"use strict";

var _formBuilder = _interopRequireDefault(require("./formBuilder"));

var _interestCollection = _interopRequireDefault(require("./interestCollection"));

var _interestList = _interopRequireDefault(require("./interestList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_formBuilder.default.buildForm();

_interestList.default.listInterests();

},{"./formBuilder":1,"./interestCollection":3,"./interestList":5}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
